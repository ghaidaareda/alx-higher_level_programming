Using ''add_integer(a, b)''
	function return add of a & b using + operator
	if a or b isn't int or float an error is raised
--------------------------------------------------------
import function:
	>>> add_integer = __impor__("0-add_integer").add_integer

import module docstring:
	>>> d = __impor__("0-add_integer").__doc__
	>>> if len(d) > 1:
	... True

import function docstring:
        >>> f = __impor__("0-add_integer").add_integer.__doc__
        >>> if len(f) > 1:
        ... True

add two integers:
	>>> add_integer(1, 2)
	3
	>>> add_integer(-3, 2)
        -1
	>>> add_integer(3.2, -2)
        1
	>>> add_integer(-1, -2)
        -3

add two floats:
        >>> add_integer(1.0, 2.0)
        3
        >>> add_integer(-3.1, 2)
        -1
        >>> add_integer(3.0, -2.0)
        1
        >>> add_integer(-1.0, -2.0)
        -3

add with non_number as a:
        >>> add_integer("b", 2)
        Traceback (most recent call last):
		...
	TypeError: a must be an integer

	>>> add_integer("hello", 2)
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

	>>> add_integer((1, 2), 2)
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

	>>> add_integer([1, 2, 3], 2)
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer
	
	>>> add_integer({1, 2, 3}, 2)
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer
	
	>>> add_integer({"b": 1}, 2)
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

	>>> add_integer(None, 2)
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer
        
add with non_number as b:
        >>> add_integer(2, "b")
        Traceback (most recent call last):
                ...
        TypeError: b must be an integer

        >>> add_integer(2, "hello")
        Traceback (most recent call last):
                ...
        TypeError: b must be an integer

        >>> add_integer(2, (1, 2))
        Traceback (most recent call last):
                ...
        TypeError: b must be an integer

        >>> add_integer(2, [1, 2, 3])
        Traceback (most recent call last):
                ...
        TypeError: b must be an integer

        >>> add_integer(2, {1, 2, 3})
        Traceback (most recent call last):
                ...
        TypeError: b must be an integer

        >>> add_integer(2, {"b": 1})
        Traceback (most recent call last):
                ...
        TypeError: b must be an integer

        >>> add_integer(2, None)
        Traceback (most recent call last):
                ...
        TypeError: b must be an integer

No b added:
	b is considered 98 by default
	
	>>> add_integer(2)
	100

	>>> add_integer(3.0)
        101

No b added and a isn't int:
	>>> add_integer("b")
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

        >>> add_integer("hello")
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

        >>> add_integer((1, 2))
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

        >>> add_integer([1, 2, 3])
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

        >>> add_integer({1, 2, 3})
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

        >>> add_integer({"b": 1})
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

        >>> add_integer(None)
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

No arrguments added:
	>>> add_integer()
        Traceback (most recent call last):
                ...
        TypeError: arguments missing

Float is not a number:
	>>> add_integer(1,float(c))
        Traceback (most recent call last):
                ...
	ValueError: can't convert float to integer
	
	>>> add_integer(float(c), 2)
        Traceback (most recent call last):
                ...
        ValueError: can't convert float to integer

	>>> add_integer(float(c))
        Traceback (most recent call last):
                ...
        ValueError: can't convert float to integer

	>>> add_integer(float(c),float(c))
        Traceback (most recent call last):
                ...
        ValueError: can't convert float to integer

Overflow:
	>>> add_integer(1,float(inf))
        Traceback (most recent call last):
                ...
        OverflowError: can't convert float infinity to integer

        >>> add_integer(float(inf), 2)
        Traceback (most recent call last):
                ...
	OverflowError: can't convert float infinity to integer

        >>> add_integer(float(inf))
        Traceback (most recent call last):
                ...
        OverflowError: can't convert float infinity to integer

        >>> add_integer(float(inf),float(inf))
        Traceback (most recent call last):
                ...
        OverflowError: can't convert float infinity to integer
